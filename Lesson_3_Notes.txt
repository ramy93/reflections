The first reflection I am posting is about adding a file onto github rather than my local git repository. There are
several reasons why I would do this. For instance, if I want to edit a project but do not have access to my local computer. Or, someone else could be working on a project with me, and would like to add new commits. 

Adding a remote to my local git repository to a newly created github repository:

git remote add [name_of_remote (usually first is called origin?)] [https://github.com/..]


to push my master branch into this new remote:

git push origin master


to pull content from my remote into my local master branch:

git pull origin master

NOTE: TO CLONE ANY repository from github to my local machine: git clone [url] as shown below 

git clone https://github.com/ramy93/recipes.git 



When to use forks, clones and branches:

Well a branch is just part of my local repository. It is a branch out of my master.
A fork is when I want to take someone's github and want to make changes of my own.
When I fork on github, the file is now in my github account. I can use git to clone it 
onto my local storage and make changes to it from there. IT WILL ONLY MAKE CHANGES TO 
MY FORK, though. Clones can be used to transfer from local machine to local machine, from
github to local machine. But from github to github, fork should be used.


When you want to update the local copy of your remote branch, use git fetch origin

THESE STATEMENTS ARE EQUIVALENT

git fetch origin           ———————————>    git pull origin master
git merge master origin/master  ——————>

the first combo of statements fetches your remote from github and updates your local
remote (origin/master). Then it merges master with your local remote. The second statement
pulls origin and merges it into master all at once.


GOOGLE fast-forward merge. Not too sure about that one.


ON GITHUB —> A pull request is confusing. Really it is a merge request. 



